@model UserManagementViewModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Manage Users";
}

<form style="display:none;">
    @Html.AntiForgeryToken()
</form>

<h1 class="mb-6">Manage Users</h1>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}

<div class="user-management-controls mb-4">
    <form asp-action="ManageUsers" method="get" class="form-inline">
        <div class="form-group mr-3">
            <label for="searchQuery" class="sr-only">Search</label>
            <input type="text" class="form-control" id="searchQuery" name="searchQuery" placeholder="Search by name, email, ID, card..." value="@Model.SearchQuery" />
        </div>
        <div class="form-group mr-3">
            <label for="filterUserType" class="sr-only">User Role</label>
            <select class="form-control" id="filterUserType" name="filterUserType">
                <option value="">All Roles</option>
                @foreach (var userType in ViewBag.UserTypes as List<SelectListItem>)
                {
                    <option value="@userType.Value" selected="@(Model.FilterUserType.HasValue && Model.FilterUserType.Value.ToString() == userType.Value)">@userType.Text</option>
                }
            </select>
        </div>
        <div class="form-group mr-3">
            <label for="filterIsEmailVerified" class="sr-only">Email Verified</label>
            <select class="form-control" id="filterIsEmailVerified" name="filterIsEmailVerified">
                <option value="">All Verification Status</option>
                <option value="true" selected="@(Model.FilterIsEmailVerified.HasValue && Model.FilterIsEmailVerified.Value == true)">Verified</option>
                <option value="false" selected="@(Model.FilterIsEmailVerified.HasValue && Model.FilterIsEmailVerified.Value == false)">Unverified</option>
            </select>
        </div>
        <div class="form-group mr-3">
            <label for="minPrizePoints" class="sr-only">Min Points</label>
            <input type="number" class="form-control" id="minPrizePoints" name="minPrizePoints" placeholder="Min Points" value="@Model.MinPrizePoints" />
        </div>
        <div class="form-group mr-3">
            <label for="maxPrizePoints" class="sr-only">Max Points</label>
            <input type="number" class="form-control" id="maxPrizePoints" name="maxPrizePoints" placeholder="Max Points" value="@Model.MaxPrizePoints" />
        </div>
        <button type="submit" class="btn btn-primary mr-2">Apply Filters</button>
        <a asp-action="ManageUsers" class="btn btn-secondary">Clear Filters</a>
    </form>
</div>

<div class="d-flex justify-content-between align-items-center mb-3">
    <a href="@Url.Action("CreateOrEditUser", "Admin")" class="btn-primary">Create New User</a>
    <button type="button" class="btn btn-danger" id="bulkDeleteBtn">Delete Selected Users</button> @* Bulk Delete Button *@
</div>

<div class="user-list-container">

    @if (Model.Users.Count == 0)
    {
        <p>No users found matching your criteria.</p>
    }
    else
    {
        <table class="table-admin-list">
            <thead>
                <tr>
                    <th><input type="checkbox" id="selectAllUsers" /></th> @* Checkbox for bulk select *@
                    <th>Customer ID</th>
                    <th>Avatar</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>User Role</th>
                    <th>Email Verified</th>
                    <th>Prize Points</th>
                    <th>GameCraft Card Number</th>
                    <th>Password</th>
                    <th>Admin Key</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model.Users)
                {
                    <tr>
                        <td><input type="checkbox" class="user-checkbox" value="@user.CustomerId" /></td> @* Individual user checkbox *@
                        <td>@user.CustomerId</td>
                        <td>
                            <img src="@(user.AvatarImageData != null ? Url.Action("GetAvatarImage", "Account", new { customerId = user.CustomerId }) : Url.Action("GetDefaultAvatar", "Account"))" alt="Avatar" style="width: 50px; height: 50px; border-radius: 50%;" />
                        </td>
                        <td>@user.Name</td>
                        <td>@user.Email</td>
                        <td>@user.Phone</td>
                        <td>
                            @(ViewBag.UserTypes != null
                                                ? ((List<SelectListItem>)ViewBag.UserTypes).FirstOrDefault(ut => ut.Value == user.UserType.ToString())?.Text ?? "Unknown"
                                                : "Unknown")
                </td>
                <td>
                    @if (user.IsEmailVerified)
                            {
                                <span class="badge bg-success">Verified</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Unverified</span>
                            }
                        </td>
                        <td>@user.PrizePoints</td>
                        <td>@user.GameCraftCardNumber</td>
                        <td>
                            <input type="password" id="password_@user.CustomerId" class="form-control" value="@user.PasswordHash" readonly style="width: 120px; display: inline-block;" />
                            <button type="button" class="btn btn-secondary btn-sm" onclick="togglePassword('@user.CustomerId')">Show</button>
                        </td>
                        <td>
                            @if (user.UserType == 0) // Assuming 0 is the value for Admin
                            {
                                <input type="text" id="adminKey_@user.CustomerId" class="form-control" value="@user.AdminKey" readonly style="width: 120px; display: inline-block;" />
                                <button type="button" class="btn btn-secondary btn-sm" onclick="toggleAdminKey('@user.CustomerId')">Show</button>
                            }
                            else
                            {
                                <span>User is Not An Admin</span>
                            }
                        </td>
                        <td>
                            <a href="@Url.Action("CreateOrEditUser", "Admin", new { id = user.CustomerId })" class="btn-action btn-edit">Edit</a>
                            <form asp-action="DeleteUser" asp-controller="Admin" method="post" class="inline-form" onsubmit="return confirm('Are you sure you want to delete this user?');" style="display:inline;">
                                <input type="hidden" name="id" value="@user.CustomerId" />
                                <button type="submit" class="btn-action btn-delete">Delete</button>
                            </form>
                            <a href="@Url.Action("UserAuditLog", "Admin", new { customerId = user.CustomerId })" class="btn-action btn-info btn-sm mt-1">Audit Log</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@section Scripts {
    <script>
        function togglePassword(userId) {
            const passwordInput = document.getElementById(`password_${userId}`);
            if (passwordInput.type === "password") {
                passwordInput.type = "text";
            } else {
                passwordInput.type = "password";
            }
        }

        function toggleAdminKey(userId) {
            const adminKeyInput = document.getElementById(`adminKey_${userId}`);
            if (adminKeyInput.type === "password") {
                adminKeyInput.type = "text";
            } else {
                adminKeyInput.type = "password";
            }
        }

        async function resetPassword(userId, userEmail) {
            if (confirm(`Are you sure you want to reset the password for user ${userEmail}? A new password will be sent to their email.`)) {
                try {
                    const response = await fetch('@Url.Action("ResetUserPassword", "Admin")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify({ customerId: userId, email: userEmail })
                    });
                    const result = await response.json();
                    if (result.success) {
                        alert(result.message);
                        location.reload();
                    } else {
                        alert('Error: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error resetting password:', error);
                    alert('An error occurred while trying to reset the password.');
                }
            }
        }

        // Bulk Delete functionality
        document.getElementById('selectAllUsers').addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.user-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });

                document.getElementById('bulkDeleteBtn').addEventListener('click', async function() {
            const selectedUserIds = Array.from(document.querySelectorAll('.user-checkbox:checked'))
                                       .map(cb => parseInt(cb.value));

            if (selectedUserIds.length === 0) {
                alert('Please select at least one user to delete.');
                return;
            }

            if (confirm(`Are you sure you want to delete ${selectedUserIds.length} selected user(s)? This action cannot be undone.`)) {
                try {
                    const formData = new FormData();
                    formData.append('userIds', selectedUserIds.join(','));

                    // Get the anti-forgery token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    formData.append('__RequestVerificationToken', token);

                    const response = await fetch('@Url.Action("BulkDeleteUsers", "Admin")', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    if (result.success) {
                        alert(result.message);
                        location.reload();
                    } else {
                        alert('Error: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error during bulk delete:', error);
                    alert('An error occurred during bulk deletion: ' + error.message);
                }
            }
        });

    </script>
}
