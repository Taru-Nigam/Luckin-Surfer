@model List<GameCraft.Models.Product>

@{
    ViewData["Title"] = "Prize Stock";
    Layout = "_EmployeeLayout";
}

<section class="employee-prize-stock-section">
    <div class="container">
        <h2 class="employee-section-title">Prize Stock Inventory</h2>

        <div class="employee-table-container">
            <table class="employee-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Image</th>
                        <th>Prize Name</th>
                        <th>Quantity</th>
                        <th>Ticket Cost</th> @* Changed column header to "Ticket Cost" again to match requirement **@
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Model)
                    {
                        <tr data-id="@product.ProductId">
                            <td>@product.ProductId</td>
                            <td>
                                @if (product.ImageData != null && product.ImageData.Length > 0)
                                {
                                    var base64 = Convert.ToBase64String(product.ImageData);
                                    var imgSrc = $"data:image/jpeg;base64,{base64}";
                                    <img src="@imgSrc" alt="@product.Name" class="prize-stock-image-thumb" />
                                }
                                else
                                {
                                    <img src="/images/placeholder.png" alt="No Image" class="prize-stock-image-thumb" />
                                }
                            </td>
                            <td>@product.Name</td>
                            <td class="quantity-cell">
                                <span class="display-quantity">@product.Quantity</span>
                                <input type="number" class="edit-quantity-input" value="@product.Quantity" min="0" style="display:none;" />
                            </td>
                            <td>@product.Price **Tickets**</td> @* Changed to display as tickets *@
                            <td class="actions-cell">
                                <button class="btn btn-sm btn-info edit-btn">Edit</button>
                                <button class="btn btn-sm btn-danger delete-btn">Delete</button>
                                <button class="btn btn-sm btn-success save-btn" style="display:none;">Save</button>
                                <button class="btn btn-sm btn-secondary cancel-btn" style="display:none;">Cancel</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const tableBody = document.querySelector('tbody');

            tableBody.addEventListener('click', async (event) => {
                const target = event.target;

                if (target.classList.contains('edit-btn')) {
                    const row = target.closest('tr');
                    const displayQuantitySpan = row.querySelector('.display-quantity');
                    const editQuantityInput = row.querySelector('.edit-quantity-input');
                    const editBtn = row.querySelector('.edit-btn');
                    const deleteBtn = row.querySelector('.delete-btn');
                    const saveBtn = row.querySelector('.save-btn');
                    const cancelBtn = row.querySelector('.cancel-btn');

                    displayQuantitySpan.style.display = 'none';
                    editQuantityInput.style.display = 'block';
                    editQuantityInput.value = displayQuantitySpan.textContent;

                    editBtn.style.display = 'none';
                    deleteBtn.style.display = 'none';
                    saveBtn.style.display = 'inline-block';
                    cancelBtn.style.display = 'inline-block';

                    editQuantityInput.focus();
                } else if (target.classList.contains('save-btn')) {
                    const row = target.closest('tr');
                    const displayQuantitySpan = row.querySelector('.display-quantity');
                    const editQuantityInput = row.querySelector('.edit-quantity-input');
                    const editBtn = row.querySelector('.edit-btn');
                    const deleteBtn = row.querySelector('.delete-btn');
                    const saveBtn = row.querySelector('.save-btn');
                    const cancelBtn = row.querySelector('.cancel-btn');

                    const newQuantity = editQuantityInput.value;
                    const itemId = row.dataset.id;

                    if (isNaN(newQuantity) || parseInt(newQuantity) < 0) {
                        alert('Please enter a valid non-negative number for quantity.');
                        return;
                    }

                    console.log(`Attempting to save new quantity: ${newQuantity} for Product ID: ${itemId}`);

                    try {
                        const response = await fetch(`/api/prizes/updatequantity`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                id: parseInt(itemId),
                                quantity: parseInt(newQuantity)
                            })
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.message || 'Failed to update quantity on server.');
                        }

                        const data = await response.json();
                        console.log('Server response:', data);

                        displayQuantitySpan.textContent = data.newQuantity;
                        displayQuantitySpan.style.display = 'inline';
                        editQuantityInput.style.display = 'none';

                        editBtn.style.display = 'inline-block';
                        deleteBtn.style.display = 'inline-block';
                        saveBtn.style.display = 'none';
                        cancelBtn.style.display = 'none';

                    } catch (error) {
                        console.error('Error updating quantity:', error);
                        alert(`Failed to update quantity: ${error.message}. Please try again.`);

                        displayQuantitySpan.style.display = 'inline';
                        editQuantityInput.style.display = 'none';
                        editBtn.style.display = 'inline-block';
                        deleteBtn.style.display = 'inline-block';
                        saveBtn.style.display = 'none';
                        cancelBtn.style.display = 'none';
                    }
                } else if (target.classList.contains('cancel-btn')) {
                    const row = target.closest('tr');
                    const displayQuantitySpan = row.querySelector('.display-quantity');
                    const editQuantityInput = row.querySelector('.edit-quantity-input');
                    const editBtn = row.querySelector('.edit-btn');
                    const deleteBtn = row.querySelector('.delete-btn');
                    const saveBtn = row.querySelector('.save-btn');
                    const cancelBtn = row.querySelector('.cancel-btn');

                    displayQuantitySpan.style.display = 'inline';
                    editQuantityInput.style.display = 'none';

                    editBtn.style.display = 'inline-block';
                    deleteBtn.style.display = 'inline-block';
                    saveBtn.style.display = 'none';
                    cancelBtn.style.display = 'none';
                } else if (target.classList.contains('delete-btn')) {
                    const row = target.closest('tr');
                    const itemId = row.dataset.id;
                    if (confirm(`Are you sure you want to delete Prize ID ${itemId}? This action cannot be undone.`)) {
                        console.log(`Deleting Prize ID: ${itemId}`);
                        alert("Delete functionality not yet implemented.");
                    }
                }
            });
        });
    </script>
}
