@model Customer
@{
    ViewBag.Title = "My Account";
    // Set the initial active section based on ViewBag.ActiveSection, default to 'dashboard'
    string activeSection = ViewBag.ActiveSection ?? "dashboard";
}

<div class="account-page-container">
    <div class="sidebar">
        <img src="@(Model.AvatarImageData != null ? Url.Action("GetAvatarImage", "Account", new { customerId = Model.CustomerId }) : Url.Action("GetDefaultAvatar", "Account"))" alt="User Avatar" class="profile-header-avatar" id="profileHeaderAvatar" />
        <ul>
            <li><a href="#" class="sidebar-link @(activeSection == "dashboard" ? "active" : "")" id="sidebarDashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
            <li><a href="#" class="sidebar-link @(activeSection == "accountDetails" ? "active" : "")" id="sidebarAccountDetails"><i class="fas fa-user-circle"></i> Account Details</a></li>
            <li><a href="#" class="sidebar-link @(activeSection == "orderHistory" ? "active" : "")" id="sidebarOrderHistory"><i class="fas fa-history"></i> Order History</a></li>
            <li><a href="#" class="sidebar-link @(activeSection == "changePassword" ? "active" : "")" id="sidebarChangePassword"><i class="fas fa-key"></i> Change Password</a></li>
            <li><a href="@Url.Action("Logout", "Account")"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
        </ul>
    </div>

    <section class="account-content">
        <h2 class="section-title" id="dashboardTitle" style="display:@(activeSection == "dashboard" ? "block" : "none");">Dashboard</h2>
        <h2 class="section-title" id="accountDetailsTitle" style="display:@(activeSection == "accountDetails" ? "block" : "none");">Account Settings</h2>
        <h2 class="section-title" id="orderHistoryTitle" style="display:@(activeSection == "orderHistory" ? "block" : "none");">Order History</h2>
        <h2 class="section-title" id="changePasswordTitle" style="display:@(activeSection == "changePassword" ? "block" : "none");">Change Password</h2>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="account-section success-message">@TempData["SuccessMessage"]</div>
        }

        @* Dashboard Section *@
        <div id="dashboardSection" class="dashboard-section" style="display:@(activeSection == "dashboard" ? "grid" : "none");">
            <div class="dashboard-card">
                <h3>Prize Points</h3>
                <p class="dashboard-value">@Model.PrizePoints</p>
            </div>
            <div class="dashboard-card">
                <h3>Linked Card Number</h3>
                <p class="dashboard-value">@Model.GameCraftCardNumber </p>
            </div>
            <div class="dashboard-card">
                <h3>Recent Activity</h3>
                <ul class="activity-list">
                    <li>Played "Space Conquerors" - Earned 100 points</li>
                    <li>Purchased "Power-up Pack" - Spent 500 points</li>
                    <li>Completed "Daily Quest" - Earned 50 points</li>
                    <li>Joined "Weekend Tournament"</li>
                </ul>
            </div>
            @* Add more dashboard cards as needed *@
        </div>

        @* Account Details Form *@
        <form asp-controller="Account" asp-action="UpdateAccount" method="post" id="accountForm" enctype="multipart/form-data" style="display:@(activeSection == "accountDetails" ? "block" : "none");">
            <input type="hidden" asp-for="CustomerId" />
            <input type="hidden" asp-for="UserType" />
            <input type="hidden" asp-for="PrizePoints" />
            <input type="hidden" asp-for="PasswordHash" />
            <input type="hidden" asp-for="Salt" />


            <div class="form-group">
                <label asp-for="Email">Email address</label>
                <input asp-for="Email" class="form-control" readonly />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Name">Username</label>
                <input asp-for="Name" class="form-control" readonly />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Phone"></label>
                <input asp-for="Phone" class="form-control" readonly />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Address"></label>
                <input asp-for="Address" class="form-control" readonly />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="City"></label>
                <input asp-for="City" class="form-control" readonly />
                <span asp-validation-for="City" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="PostCode"></label>
                <input asp-for="PostCode" class="form-control" readonly />
                <span asp-validation-for="PostCode" class="text-danger"></span>
            </div>

            <button type="button" class="btn btn-secondary" id="editInfoButton">Edit My Info</button>
            <button type="submit" class="btn btn-primary" id="saveButton" style="display:none;">Save Changes</button>
        </form>

        @* Order History Section - NEW SECTION *@
        <div id="orderHistorySection" class="account-section" style="display:@(activeSection == "orderHistory" ? "block" : "none");">
            <h3 class="section-subtitle">Your Recent Orders</h3>
            @if (Model.Order != null && Model.Order.Any())
            {
                <div class="order-history-card">
                    <div class="order-history-header">
                        <div class="header-col-date">Date</div>
                        <div class="header-col-items">Items</div>
                        <div class="header-col-total">Total Cost</div>
                    </div>

                    <ul class="order-history-list">
                        @foreach (var order in Model.Order.OrderByDescending(o => o.OrderDate))
                        {
                            var hasItems = false; // Flag to check if there are items
                            <li class="order-list-item">
                                <div class="order-row-content">
                                    <a href="@Url.Action("OrderDetail", "Order", new { id = order.OrderId })" class="order-detail-link-overlay" title="View Order Details for Order #@order.OrderId"></a>
                                    <span class="order-date-cell">@order.OrderDate.ToShortDateString()</span>
                                    <span class="order-items-cell">
                                        @* Display each item in a separate line within the cell *@
                                        @if (order.OrderDetails != null && order.OrderDetails.Any())
                                        {
                                            hasItems = true; // Set flag to true if there are order details
                                            foreach (var item in order.OrderDetails)
                                            {
                                                <div>
                                                    @item.Product.Name
                                                    @if (item.Quantity > 1)
                                                    {
                                                        @Html.Raw($" (x{item.Quantity})")
                                                    }
                                                </div>
                                            }
                                        }
                                        @if (order.CardOrderDetails != null && order.CardOrderDetails.Any())
                                        {
                                            foreach (var cardDetail in order.CardOrderDetails)
                                            {
                                                <div>
                                                    @cardDetail.Card.Name
                                                    @if (cardDetail.Quantity > 1)
                                                    {
                                                        @Html.Raw($" (x{cardDetail.Quantity})")
                                                    }
                                                </div>
                                            }
                                        }
                                        else if (!hasItems)
                                        {
                                            <div>No items listed</div>
                                        }
                                    </span>
                                    <span class="order-total-cell">$@order.TotalAmount.ToString("F2")</span>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <p class="no-orders-message">You have no order history yet.</p>
            }
        </div>


        @* Change Password Section *@
        <div id="changePasswordSection" class="form-group" style="display:@(activeSection == "changePassword" ? "block" : "none"); margin-top: 20px;">
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" class="form-control" />
                <input type="checkbox" id="showNewPassword" /> Show Password
            </div>
            <div class="form-group">
                <label for="confirmPassword">Confirm New Password:</label>
                <input type="password" id="confirmPassword" class="form-control" />
                <input type="checkbox" id="showConfirmPassword" /> Show Password
            </div>
            <button type="button" class="btn btn-primary" id="changePasswordButton">Change Password</button>
        </div>
    </section>
</div>

<div id="avatarModal" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h4 style="color: #00ffcc;">Choose Avatar:</h4>
        <div class="mt-2" id="avatarSelectionOptions">
            @for (int i = 1; i <= 4; i++)
            {
                var avatarPath = $"/images/avatar-00{i}.png";
                <label style="margin-right: 10px; cursor: pointer;">
                    <input type="radio" name="AvatarSelection" value="@avatarPath"
                           class="avatar-radio" data-avatar-path="@avatarPath" />
                    <img src="@avatarPath" style="width: 48px; height: 48px; border-radius: 50%;" class="avatar-image" />
                </label>
            }
            <label style="margin-right: 10px; cursor: pointer;">
                <input type="radio" name="AvatarSelection" value="/images/default-avatar.png"
                       class="avatar-radio" data-avatar-path="/images/default-avatar.png" />
                <img src="/images/default-avatar.png" style="width: 48px; height: 48px; border-radius: 50%;" class="avatar-image" />
            </label>
        </div>

        <div class="form-group" style="margin-top: 20px;">
            <label for="avatarFile">Upload Custom Avatar:</label>
            <input type="file" id="avatarFile" name="avatarFile" class="form-control" accept="image/*" />
        </div>
        <button type="button" class="btn btn-primary" id="saveAvatarButton" style="margin-top: 20px;">Save Avatar</button>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function() {
            // Initial state is set by ViewBag.ActiveSection in the Razor code
            // Hide all sections initially, then show the active one
            function hideAllSections() {
                $('#dashboardSection').hide();
                $('#accountForm').hide();
                $('#orderHistorySection').hide(); // NEW HIDE
                $('#changePasswordSection').hide();
                $('#dashboardTitle').hide();
                $('#accountDetailsTitle').hide();
                $('#orderHistoryTitle').hide(); // NEW HIDE TITLE
                $('#changePasswordTitle').hide();
                $('#saveButton').hide();
                $('#editInfoButton').hide(); // Hide edit button initially for account details
            }

            function showSection(sectionName) {
                hideAllSections();
                $('.sidebar-link').removeClass('active'); // Remove active from all sidebar links

                if (sectionName === 'dashboard') {
                    $('#dashboardSection').show();
                    $('#dashboardTitle').show();
                    $('#sidebarDashboard').addClass('active');
                } else if (sectionName === 'accountDetails') {
                    $('#accountForm').show();
                    $('#accountDetailsTitle').show();
                    setFormReadonly(); // Ensure form is readonly on display
                    $('#sidebarAccountDetails').addClass('active');
                } else if (sectionName === 'orderHistory') { // NEW SHOW SECTION
                    $('#orderHistorySection').show();
                    $('#orderHistoryTitle').show();
                    $('#sidebarOrderHistory').addClass('active');
                } else if (sectionName === 'changePassword') {
                    $('#changePasswordSection').show();
                    $('#changePasswordTitle').show();
                    $('#sidebarChangePassword').addClass('active');
                }
            }

            // Function to reset form to readonly state
            function setFormReadonly() {
                $('#accountForm input:not([type="hidden"])').attr('readonly', 'readonly');
                $('#saveButton').hide();
                $('#editInfoButton').show();
            }

            // Initial display based on ViewBag (or default 'dashboard')
            showSection('@activeSection');

           // Handle "Edit My Info" button click
            $('#editInfoButton').click(function() {
                // Enable all input fields
                $('#accountForm input').removeAttr('readonly');
                $('#saveButton').show(); // Show the save button
                $(this).hide(); // Hide the edit button
            });


            // Handle clicking the main profile avatar
            $('#profileHeaderAvatar').click(function() {
                $('#avatarModal').show();
                const currentAvatarSrc = $('#profileHeaderAvatar').attr('src');
                $('.avatar-radio').prop('checked', false); // Uncheck all radios

                // Check if the current avatar matches any pre-set avatar
                $('.avatar-radio').each(function() {
                    const dataPath = $(this).data('avatar-path');
                    // Construct full URL for comparison, handling potential relative paths
                    const fullPath = new URL(dataPath, window.location.origin).href;
                    if (currentAvatarSrc.includes(fullPath)) { // Use includes for robustness
                        $(this).prop('checked', true);
                        return false; // Break loop
                    }
                });

                $('#avatarFile').val(''); // Clear custom file input
            });

            // Close avatar modal
            $('.close-button').click(function() {
                $('#avatarModal').hide();
            });

            // Close modal when clicking outside of modal-content
            $(window).click(function(event) {
                if (event.target.id === 'avatarModal') {
                    $('#avatarModal').hide();
                }
            });

            // Update the main profile header avatar when a radio button is selected in modal
            $('.avatar-radio').change(function() {
                const selectedPath = $(this).data('avatar-path');
                $('#profileHeaderAvatar').attr('src', selectedPath);
                $('#avatarFile').val(''); // Clear custom file input
            });

            // Handle custom avatar upload preview in modal
            $('#avatarFile').change(function() {
                if (this.files && this.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function(e) {
                        $('#profileHeaderAvatar').attr('src', e.target.result);
                    };
                    reader.readAsDataURL(this.files[0]);
                    $('.avatar-radio').prop('checked', false); // Uncheck all radio buttons
                }
            });

            // Save Avatar button in modal
            $('#saveAvatarButton').click(function() {
                const formData = new FormData(); // Create new FormData object

                const avatarFile = $('#avatarFile')[0].files[0];
                const selectedAvatarPath = $('input[name="AvatarSelection"]:checked').data('avatar-path');

                if (avatarFile) {
                    formData.append('avatarFile', avatarFile);
                } else if (selectedAvatarPath) {
                    formData.append('selectedAvatarPath', selectedAvatarPath);
                } else {
                    // If neither file nor pre-set path is provided, do nothing or handle as "no change"
                    alert("Please select an avatar or upload a custom one.");
                    return;
                }

                // Send AJAX request to update avatar
                $.ajax({
                    url: '@Url.Action("UpdateAvatar", "Account")', // New action for avatar update
                    type: 'POST',
                    data: formData,
                    processData: false, // Important: prevent jQuery from processing the data
                    contentType: false, // Important: prevent jQuery from setting contentType
                    success: function(response) {
                        if (response.success) {
                            alert("Avatar updated successfully!");
                            // Update the avatar in the header if it's visible
                            if (response.newAvatarUrl) {
                                $('.user-info img').attr('src', response.newAvatarUrl);
                            }
                            $('#avatarModal').hide();
                            location.reload(); // Reload to reflect changes in session/display
                        } else {
                            alert("Error updating avatar: " + response.message);
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        alert("An error occurred while updating avatar: " + textStatus);
                    }
                });
            });

            // Sidebar navigation clicks
            $('#sidebarDashboard').click(function(e) {
                e.preventDefault();
                showSection('dashboard');
            });

            $('#sidebarAccountDetails').click(function(e) {
                e.preventDefault();
                showSection('accountDetails');
            });

            $('#sidebarOrderHistory').click(function(e) { // NEW CLICK HANDLER
                e.preventDefault();
                showSection('orderHistory');
            });

            $('#sidebarChangePassword').click(function(e) {
                e.preventDefault();
                showSection('changePassword');
            });

            $('#changePasswordButton').click(function() {
                const newPassword = $('#newPassword').val();
                const confirmPassword = $('#confirmPassword').val();

                if (newPassword !== confirmPassword) {
                    alert("Passwords do not match.");
                    return;
                }
                if (newPassword === "" || confirmPassword === "") {
                    alert("Password fields cannot be empty.");
                    return;
                }

                $.post('@Url.Action("ChangePassword", "Account")', { newPassword: newPassword, confirmPassword: confirmPassword }, function(response) {
                    if (response.success) {
                        alert("Password changed successfully!");
                        // After successful password change, show account details
                        showSection('accountDetails');
                        $('#newPassword').val('');
                        $('#confirmPassword').val('');
                    } else {
                        alert("Error: " + response.message);
                    }
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    alert("An error occurred while changing password: " + textStatus);
                });
            });

            // Toggle password visibility
            $('#showNewPassword').change(function() {
                const passwordField = $('#newPassword');
                passwordField.attr('type', this.checked ? 'text' : 'password');
            });

            $('#showConfirmPassword').change(function() {
                const confirmPasswordField = $('#confirmPassword');
                confirmPasswordField.attr('type', this.checked ? 'text' : 'password');
            });
        });
    </script>
}
