@model RegisterViewModel
@{
    ViewBag.Title = "Register";
}

<section class="register-section content-section">
    <div class="container">
        <h2 class="section-title">CREATE A NEW ACCOUNT</h2>

        <p class="form-instruction">Fill in the details to register</p>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <ul>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                @TempData["SuccessMessage"]
            </div>
        }

        <form asp-action="Register" method="post" class="register-form" id="registrationForm">
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" class="form-control" required placeholder="Choose a username" value="@Model.Username" />
            </div>

            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" class="form-control" required placeholder="Enter your email" value="@Model.Email" />
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" class="form-control" required placeholder="Create a password" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password:</label>
                <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required placeholder="Confirm your password" />
            </div>

            <button type="submit" class="register-button">Register</button>
        </form>

        <div class="login-link">
            <p>Already have an account? <a asp-action="Login">Login here</a></p>
        </div>

        @if (ViewBag.RegistrationSuccess != null && ViewBag.RegistrationSuccess == true)
        {
            <div id="successModal" class="modal" style="display:block; position: fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.5);">
                <div style="background:white; padding:20px; margin: 15% auto; width: 300px; text-align:center;">
                    <h3>Registration Successful!</h3>
                    <p>Your account has been created.</p>
                    <a href="/" class="btn btn-primary">Go to Home</a>
                </div>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        // This script is primarily for demonstrating the flow.
        // The actual OTP verification will happen on the VerifyOtp page.
        // However, if the server returns to this page with an email for OTP,
        // we can provide a hint or redirect.
        document.addEventListener('DOMContentLoaded', function () {
            const emailForOtp = "@TempData["EmailForOtp"]";
            if (emailForOtp && emailForOtp !== "") {
                // If we land back on Register.cshtml with a pending OTP,
                // you might want to redirect to VerifyOtp or show a message.
                // For this implementation, the AccountController.Register POST
                // action already redirects to VerifyOtp.
                // This block would be more relevant if you wanted to show OTP input directly here.
                console.log("Email needs OTP verification: " + emailForOtp);
                // Example: You could show a message here prompting the user to check their email.
            }
        });
    </script>
}
